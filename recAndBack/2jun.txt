// cryptarithmetic-official

public static int getNum(String s,HashMap<Character, Integer> map ){
        
        String ans = "";
        
        for(char c : s.toCharArray()){
            ans += map.get(c);
        }
        return Integer.parseInt(ans);
    }
  
  public static void solution(String unique, int idx, 
							  HashMap<Character, Integer> charIntMap, boolean[] usedNumbers, 
							  String s1, String s2, String s3) {
	    // write your code here
	    
	    if( idx == unique.length() ){
	        
	        int n1 = getNum(s1,charIntMap);
	        int n2 = getNum(s2,charIntMap);
	        int n3 = getNum(s3,charIntMap);
	        
	        if( n1+n2 == n3 ){
	            
	            for(char c = 'a'; c<='z' ; c++){
	                
	                if( charIntMap.containsKey(c) ){
	                    System.out.print( c +"-" +charIntMap.get(c)+" " );
	                }
	            }
	            System.out.println();
	        }
	        return;
	    }
	    
	    for(int i=0 ; i<=9 ; i++){
	        
	        if( usedNumbers[i] ){
	            continue;
	        }else{
	            
	            charIntMap.put( unique.charAt(idx), i );
	            usedNumbers[i] = true;
	            solution(unique, idx+1, charIntMap, usedNumbers,s1,s2,s3 );
	            usedNumbers[i] = false;
	            charIntMap.put( unique.charAt(idx), -1 );
	            
	        }
	        
	    }    
  }

-------------------------------------------------------------------------------------
// crossword-puzzle-official 

public class Main {

  public static void solution(char[][] arr, String[] words, int vidx) {
    //write your code here
    if ( vidx == words.length ) {
      print(arr);
      return;
    }

    for (int r = 0 ; r < arr.length ; r++) {
      for (int c = 0 ; c < arr[0].length ; c++) {

        if (canPlaceHor( arr, words[vidx], r, c )) {
          boolean[] cur = placeHor(arr, words[vidx], r, c);
          solution(arr, words, vidx + 1);
          removeHor(arr, cur, r, c);
        }

        if (canPlaceVer( arr, words[vidx], r, c )) {
          boolean[] cur = placeVer(arr, words[vidx], r, c);
          solution(arr, words, vidx + 1);
          removeVer(arr, cur, r, c);
        }
      }
    }


  }

  public static boolean canPlaceHor( char[][] arr, String word, int r, int c ) {

    if ( c - 1 >= 0 && arr[r][c - 1] != '+' ) {
      return false;
    } else if ( c + word.length() < arr[0].length && arr[r][c + word.length()] != '+' ) {
      return false;
    }


    for (int j = 0 ; j < word.length() ; j++) {

      if ( j + c >= arr[0].length ) {
        return false;
      }

      if ( arr[r][j + c] == '-' || arr[r][j + c] == word.charAt(j)  ) {
        continue;
      } else
        return false;
    }
    return true;
  }
  
  public static boolean[] placeHor( char[][] arr, String word, int r, int c ) {

    boolean[] placed = new boolean[word.length()];

    for (int j = 0 ; j < word.length() ; j++) {

      if ( arr[r][j + c] == '-' )
        placed[j] = true;
        arr[r][j+c] = word.charAt(j);
      }
      
    return placed;
  }
  
  public static boolean[] placeVer( char[][] arr, String word, int r, int c ) {

    boolean[] placed = new boolean[word.length()];

    for (int i = 0 ; i < word.length() ; i++) {

      if ( arr[r+i][c] == '-' )
        placed[i] = true;
        arr[i+r][c] = word.charAt(i);
      }
      
    return placed;
  }

  public static boolean canPlaceVer( char[][] arr, String word, int r, int c ) {

    if ( r - 1 >= 0 && arr[r - 1][c] != '+' ) {
      return false;
    } else if ( r + word.length() < arr.length && arr[r + word.length()][c] != '+' ) {
      return false;
    }


    for (int i = 0 ; i < word.length() ; i++) {

      if ( i + r >= arr.length ) {
        return false;
      }

      if ( arr[i + r][c] == '-' || arr[i + r][c] == word.charAt(i)  ) {
        continue;
      } else
        return false;
    }
    return true;
  }

  public static void removeHor(char[][] arr, boolean[] word, int r, int c) {

    for (int i = 0 ; i < word.length ; i++) {
      if (word[i])
        arr[r][i + c] = '-';
    }
  }

  public static void removeVer(char[][] arr, boolean[] word, int r, int c) {

    for (int i = 0 ; i < word.length ; i++) {
      if (word[i])
        arr[r + i][c] = '-';
    }
  }
}